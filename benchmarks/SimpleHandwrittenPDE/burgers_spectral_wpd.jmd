---
title: Burgers' Equation Pseudospectral Method Work-Precision Diagrams
author: Arjit Seth
---


The following initial-boundary-value problem is considered for Burgers' equation in one dimension:
```math
\begin{aligned}
    \frac{\partial}{\partial t} u(x,t) + \frac{\partial}{\partial x} u^2(x,t) & = \nu \frac{\partial^2}{\partial x^2} u(x,t) \\
    u(x,0) & = \cos(\cos(x-0.1))
\end{aligned}
```
The equations are discretized in space via pseudospectral methods. Specifically, the Fourier basis is used to represent the solution in space.
```math

```

```julia
using OrdinaryDiffEq
using DiffEqDevTools
using SciMLOperators
using LinearSolve
using LinearAlgebra
using SparseArrays
using ClassicalOrthogonalPolynomials
const COP = ClassicalOrthogonalPolynomials
using Plots
gr();
```

```julia
function linear_term(S, n, nu)
    D2 = Derivative(S, 2)[1:n, 1:n]
    return nu * D2
end

function nonlinear_term(dû, û, p, t)
    D, T, Ti, u, tmp = p
    mul!(tmp, D, û)
    mul!(u, Ti, tmp)
    mul!(tmp, Ti, û)
    @. tmp = tmp*u
    mul!(u, T, tmp)
    @. dû = - u
end

function burgers(S, n)
    nu = 0.25 # Diffusion coefficient
    D = (Derivative(S) → S)[1:n,1:n] # First derivative operator
    D2 = linear_term(S, n, nu)

    T = ApproxFun.plan_transform(S, n)
    Ti = ApproxFun.plan_itransform(S, n)
    
    x = points(S, n)
    û₀ = T * cos.(cos.(x .- 0.1)) # Initial condition
    p = (D, T, Ti, similar(û₀), similar(û₀))
    prob = SplitODEProblem(MatrixOperator(Diagonal(D2)), nonlinear_term, û₀, (0.0, 1.0), p)

    return x, prob
end
```

Reference solution using Rodas5 is below:

```julia
S = Fourier()
n = 128
x, prob = burgers(S, n)
@time sol = solve(prob, 
    Rodas5(autodiff = false); 
    # Tsit5(),
    reltol = 1e-12, abstol = 1e-12, adaptive=true)

tslices = LinRange(prob.tspan..., 50)
ys = mapreduce(t -> prob.p[3] * sol(t), hcat, tslices)
heatmap(x, tslices, ys')
```

## Work-Precision Diagrams

```julia
test_sol = TestSolution(sol); # Reference solution for error estimation

abstols = 0.1 .^ (5:8) # all fixed dt methods so these don't matter much
reltols = 0.1 .^ (1:4)
multipliers = 0.5 .^ (0:3)
setups = [
    Dict(:alg => IMEXEuler(), :dts => 1e-4 * multipliers), 
    Dict(:alg => CNAB2(), :dts => 1e-3 * multipliers),
    Dict(:alg => CNLF2(), :dts => 1e-4 * multipliers),
    Dict(:alg => ETDRK2(), :dts => 1e-3 * multipliers),
    Dict(:alg => SBDF2(), :dts => 1e-3 * multipliers)
]
labels = hcat(
    "IMEXEuler", 
    "CNAB2",
    "CNLF2",
    "ETDRK2",
    "SBDF2",
)

@time wp = WorkPrecisionSet(prob, abstols, reltols, setups;
    print_names=true, names=labels, numruns=5, error_estimate=:l2,
    save_everystep=false, appxsol=test_sol, maxiters=Inf);

plot(wp, label=labels, 
    markershape=:auto, title="Work-Precision Diagram",
    legend=:topright, size=(800, 600))
```


```julia, echo = false
using SciMLBenchmarks
SciMLBenchmarks.bench_footer(WEAVE_ARGS[:folder],WEAVE_ARGS[:file])
```
