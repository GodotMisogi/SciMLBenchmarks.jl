---
title: KdV FDM Work-Precision Diagrams
author: HAO HAO
---

```julia
using Pkg;
print(Pkg.status())
using OrdinaryDiffEq
using DiffEqDevTools
using Sundials
using SciMLOperators
using LinearSolve
using LinearAlgebra
using RecursiveFactorization
using Plots
gr();
```



```julia
# Define the linear and nonlinear terms
function linear_term(N)
    dx = 1 / (N + 1)
    du = ones(N - 1) # off diagonal
    du2 = -ones(N - 1) # off diagonal
    d = (1 / 2) * ones(N - 2)
    d2 = (-1 / 2) * ones(N - 2)
    diag = -2 * ones(N)
    return 5e-5 * (1 / dx^3) * MatrixOperator(
        diagm(
            -2 => d2, 
            -1 => du, 
            1 => du2, 
            2 => d
        )
    )
end

# Nonlinear term
function nonlinear_term(N)
    dx = 1 / (N + 1)
    du = ones(N - 1) # super diagonal
    dl = -ones(N - 1) # lower diagonal
    D = (0.2 / dx) * diagm(-1 => dl, 1 => du)

    tmp = zeros(N)
    function (du, u, p, t)
        @. tmp = u^2
        mul!(du, D, tmp)
    end
end

# Construct the problem
function kdv_equation(N)
    f1 = linear_term(N)
    f2 = nonlinear_term(N)
    dx = 1 / (N + 1)
    xs = (1:N) * dx # Spatial discretization

    μ0 = 0.3 # Mean 
    σ0 = 0.05 # Standard deviation
    f0 = x -> 0.9 * exp(-(x - μ0)^2 / (2 * σ0^2)) # Initial condition, Gaussian-ish profile
    u0 = f0.(xs) # Initial condition discretization
    prob = SplitODEProblem(f1, f2, u0, (0.0, 1.0))
    xs, prob
end;
```

Reference solution using Tsit5 is below:

```julia
xs, prob = kdv_equation(200)
sol = solve(prob, Tsit5(); abstol=1e-11, reltol=1e-11, dt=1e-7, adaptive=true)
test_sol = TestSolution(sol);

tslices = LinRange(0.0, 1.0, 50)
ys = mapreduce(hcat, tslices) do t; sol(t) end
labels = ["t = $t" for t in tslices]
fn = heatmap(xs, tslices, ys',
    xlabel="x", ylabel="t",
)
```


## High tolerances

## In-family comparisons

1.IMEX methods (dense linear solver)

```julia
abstols = 0.1 .^ (5:8) # all fixed dt methods so these don't matter much
reltols = 0.1 .^ (1:4)
multipliers = 0.5 .^ (0:3)
setups = [
    Dict(:alg => IMEXEuler(), :dts => 1e-3 * multipliers),
    Dict(:alg => CNAB2(), :dts => 1e-5 * multipliers),
    Dict(:alg => CNLF2(), :dts => 1e-4 * multipliers),
    Dict(:alg => SBDF2(), :dts => 1e-3 * multipliers)
]
labels = ["IMEXEuler" "CNAB2" "CNLF2" "SBDF2"]
@time wp = WorkPrecisionSet(prob,abstols,reltols,setups;
                            print_names=true, names=labels,
                            numruns=5, error_estimate=:l2,
                            save_everystep=false, appxsol=test_sol, maxiters=Int(1e5));

plot(wp, label=labels, markershape=:auto, title="IMEX methods, dense linsolve, low order")
```

1.IMEX methods (Krylov linear solver)

```julia
abstols = 0.1 .^ (5:8) # all fixed dt methods so these don't matter much
reltols = 0.1 .^ (1:4)
multipliers = 0.5 .^ (0:3)
setups = [
    #Dict(:alg => IMEXEuler(linsolve=KrylovJL_GMRES()), :dts => 1e-5 * multipliers),
    Dict(:alg => CNAB2(linsolve=KrylovJL_GMRES()), :dts => 1e-5 * multipliers),
    Dict(:alg => CNLF2(linsolve=KrylovJL_GMRES()), :dts => 1e-5 * multipliers),
    Dict(:alg => SBDF2(linsolve=KrylovJL_GMRES()), :dts => 1e-4 * multipliers)
]
labels = hcat(
    #"IMEXEuler",
    "CNAB2",
    "CNLF2",
    "SBDF2",
)
@time wp = WorkPrecisionSet(prob,abstols,reltols,setups;
                            print_names=true, names=labels,
                            numruns=5, error_estimate=:l2,
                            save_everystep=false, appxsol=test_sol, maxiters=Int(1e5));

plot(wp, label=labels, markershape=:auto, title="IMEX methods, Krylov linsolve, low order")
```

2. ExpRK methods

```julia
abstols = 0.1 .^ (5:8) # all fixed dt methods so these don't matter much
reltols = 0.1 .^ (1:4)
multipliers = 0.5 .^ (0:3)
setups = [
    Dict(:alg => NorsettEuler(), :dts => 1e-6 * multipliers),
    Dict(:alg => NorsettEuler(krylov=true, m=5), :dts => 1e-3 * multipliers),
    #Dict(:alg => NorsettEuler(krylov=true, m=20), :dts => 1e-3 * multipliers), matrix contains Infs or NaNs
    Dict(:alg => ETDRK2(), :dts => 1e-3 * multipliers),
    Dict(:alg => ETDRK2(krylov=true, m=20), :dts => 1e-2 * multipliers),
    Dict(:alg => ETDRK2(krylov=true, m=20), :dts => 1e-2 * multipliers)
]
labels = hcat(
    "NorsettEuler (caching)",
    "NorsettEuler (m=5)",
    # "NorsettEuler (m=20)",
    "ETDRK2 (caching)",
    "ETDRK2 (m=5)",
    "ETDRK2 (m=20)"
)
@time wp = WorkPrecisionSet(prob,abstols,reltols,setups;
                            print_names=true, names=labels,
                            numruns=5, error_estimate=:l2,
                            save_everystep=false, appxsol=test_sol, maxiters=Int(1e5));

plot(wp, label=labels, markershape=:auto, title="ExpRK methods, low order")
```

## Between family comparisons

```julia
abstols = 0.1 .^ (5:8) # all fixed dt methods so these don't matter much
reltols = 0.1 .^ (1:4)
multipliers = 0.5 .^ (0:3)
setups = [
    Dict(:alg => CNAB2(), :dts => 1e-5 * multipliers),
          Dict(:alg => CNAB2(linsolve=KrylovJL_GMRES()), :dts => 1e-5 * multipliers),
          Dict(:alg => ETDRK2(), :dts => 1e-3 * multipliers)
]
labels = ["CNAB2 (dense linsolve)" "CNAB2 (Krylov linsolve)" "ETDRK2 (m=5)"]
@time wp = WorkPrecisionSet(prob,abstols,reltols,setups;
                            print_names=true, names=labels,
                            numruns=5, error_estimate=:l2,
                            save_everystep=false, appxsol=test_sol, maxiters=Int(1e5));

plot(wp, label=labels, markershape=:auto, title="Between family, low orders")
```

## Low tolerances

## In-family comparisons

1.IMEX methods (dense linear solver)

```julia
abstols = 0.1 .^ (7:13)
reltols = 0.1 .^ (4:10)
setups = [
    Dict(:alg => KenCarp3()),
    Dict(:alg => KenCarp4()),
    Dict(:alg => KenCarp5()),
    Dict(:alg => ARKODE(Sundials.Implicit(), order=3, linear_solver=:Dense)),
    Dict(:alg => ARKODE(Sundials.Implicit(), order=4, linear_solver=:Dense)),
    Dict(:alg => ARKODE(Sundials.Implicit(), order=5, linear_solver=:Dense))
]
labels = hcat("KenCarp3", "KenCarp4", "KenCarp5", "ARKODE3", "ARKODE4", "ARKODE5")
@time wp = WorkPrecisionSet(prob,abstols,reltols,setups;
                            print_names=true, names=labels,
                            numruns=5, error_estimate=:l2,
                            save_everystep=false, appxsol=test_sol, maxiters=Int(1e5));

plot(wp, label=labels, markershape=:auto, title="IMEX methods, dense linsolve, medium order")
```

1.IMEX methods (Krylov linear solver)

```julia
abstols = 0.1 .^ (7:13)
reltols = 0.1 .^ (4:10)
setups = [
    Dict(:alg => KenCarp3(linsolve=KrylovJL_GMRES())),
    Dict(:alg => KenCarp4(linsolve=KrylovJL_GMRES())),
    Dict(:alg => KenCarp5(linsolve=KrylovJL_GMRES())),
    Dict(:alg => ARKODE(Sundials.Implicit(), order=3, linear_solver=:GMRES)),
    Dict(:alg => ARKODE(Sundials.Implicit(), order=4, linear_solver=:GMRES)),
    Dict(:alg => ARKODE(Sundials.Implicit(), order=5, linear_solver=:GMRES))
]
labels = ["KenCarp3" "KenCarp4" "KenCarp5" "ARKODE3" "ARKODE4" "ARKODE5"]
@time wp = WorkPrecisionSet(prob,abstols,reltols,setups;
                            print_names=true, names=labels,
                            numruns=5, error_estimate=:l2,
                            save_everystep=false, appxsol=test_sol, maxiters=Int(1e5));

plot(wp, label=labels, markershape=:auto, title="IMEX methods, medium order")
```

2.ExpRK methods

```julia
abstols = 0.1 .^ (7:11) # all fixed dt methods so these don't matter much
reltols = 0.1 .^ (4:8)
multipliers = 0.5 .^ (0:4)
setups = [
    Dict(:alg => ETDRK3(), :dts => 1e-2 * multipliers),
    #Dict(:alg => ETDRK3(krylov=true, m=5), :dts => 1e-2 * multipliers),matrix contains Infs or NaNs
    Dict(:alg => ETDRK4(), :dts => 1e-3 * multipliers),
    #Dict(:alg => ETDRK4(krylov=true, m=5), :dts => 1e-2 * multipliers),matrix contains Infs or NaNs
    Dict(:alg => HochOst4(), :dts => 1e-2 * multipliers)
    #Dict(:alg => HochOst4(krylov=true, m=5), :dts => 1e-2 * multipliers)
]
] matrix contains Infs or NaNs
labels = hcat(
    "ETDRK3 (caching)", 
    # "ETDRK3 (m=5)", 
    "ETDRK4 (caching)",
    # "ETDRK4 (m=5)"
    "HochOst4 (caching)"
    # "HochOst4 (m=5)"
)
@time wp = WorkPrecisionSet(prob,abstols,reltols,setups;
                            print_names=true, names=labels,
                            numruns=5, error_estimate=:l2,
                            save_everystep=false, appxsol=test_sol, maxiters=Int(1e5));

plot(wp, label=labels, markershape=:auto, title="ExpRK methods, medium order")
```

## Between family comparisons


```julia
abstols = 0.1 .^ (7:11)
reltols = 0.1 .^ (4:8)
multipliers = 0.5 .^ (0:4)
setups = [
    Dict(:alg => KenCarp5()),
    Dict(:alg => ARKODE(Sundials.Implicit(), order=5, linear_solver=:Dense)),
    Dict(:alg => KenCarp5(linsolve=KrylovJL_GMRES())),
    Dict(:alg => ARKODE(Sundials.Implicit(), order=5, linear_solver=:GMRES)),
    Dict(:alg => ETDRK3(), :dts => 1e-2 * multipliers),
    Dict(:alg => ETDRK4(), :dts => 1e-3 * multipliers)
]
labels = hcat("KenCarp5 (dense linsolve)", "ARKODE (dense linsolve)", "KenCarp5 (Krylov linsolve)",
              "ARKODE (Krylov linsolve)", "ETDRK3 (m=5)", "ETDRK4 (m=5)")
@time wp = WorkPrecisionSet(prob,abstols,reltols,setups;
                            print_names=true, names=labels,
                            numruns=5, error_estimate=:l2,
                            save_everystep=false, appxsol=test_sol, maxiters=Int(1e5));

plot(wp, label=labels, markershape=:auto, title="Between family, medium order")
```

```julia, echo = false
using SciMLBenchmarks
SciMLBenchmarks.bench_footer(WEAVE_ARGS[:folder],WEAVE_ARGS[:file])
```
