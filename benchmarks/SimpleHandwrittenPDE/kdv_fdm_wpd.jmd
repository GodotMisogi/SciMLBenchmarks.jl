---
title: Kortwrieg-de Vries Equation FDM Work-Precision Diagrams
author: Arjit Seth
---

```julia
using OrdinaryDiffEq
using DiffEqDevTools
using SciMLOperators
using LinearSolve
using LinearAlgebra
using SparseArrays
using SummationByPartsOperators
const SBP = SummationByPartsOperators
using Plots
gr();
```

The Kortwrieg de Vries (KdV) partial differential equation is solved with the following initial and boundary conditions:
```math
\begin{align}
    \partial_t u(x,t) & = -6u\partial_x u(x,t) -\partial_x^3 u(x,t) \\
    u(0,x) & = 0.9\exp\left[-\frac{(x - \mu)^2}{2 * \sigma^2}\right], \quad \mu = 0.5,~\sigma = 0.05 \\
    u(t,0) & = u(t,1) = 0
\end{align}
```
This is discretized in space via the finite difference method.
```math
\begin{align}
    \frac{du}{dt} & = -6uD_x u -D_x^3 u \\
    u(0,x) & = 0.9\exp\left[-\frac{(x - \mu)^2}{2 * σ^2}\right], \quad \mu = 0.5,~\sigma = 0.05 \\
    u(t,0) & = u(t,1) = 0, 
\end{align}
```

```julia
nonlinear_convection!(du, u, p, t) = du .= (-6 * p.alpha / 3) * (u .* (p.D1 * u) + p.D1 * (u .^ 2))

# Construct the problem
function kortwrieg_de_vries(N, L, alpha)
    D1 = periodic_derivative_operator(derivative_order = 1, accuracy_order = 6,
                                      xmin = -L, xmax = L, N = N)
    D3 = periodic_derivative_operator(derivative_order = 3, accuracy_order = 6,
                                      xmin = -L, xmax = L, N = N)

    # u0 = usol.(first(tspan), SBP.grid(D1))
    x = SBP.grid(D1)
    u0 = @. cos(π * x / L) # Initial condition
    p = (; D1, alpha)

    tspan = (0.0, 1.0)
    prob = SplitODEProblem(MatrixOperator(-p.alpha * Matrix(D3)),
                           nonlinear_convection!, 
                           u0, tspan, p);

    return x, prob
end;
```

Reference solution using Tsit5 is below:

```julia
N = 128 # Number of grid points
L = 16.0  # Domain length
alpha = 20.0 # Lipschitz constant scaling factor
xs, prob = kortwrieg_de_vries(N, L, alpha)

@time sol = solve(prob, AutoVern7(Rodas5(autodiff = false)); 
                  dt = 1e-4, abstol = 1e-14,
                  reltol = 1e-14, adaptive = true)

test_sol = TestSolution(sol) # Reference solution for error estimation

tslices = LinRange(prob.tspan..., 50)
ys = mapreduce(sol, hcat, tslices)
plt = heatmap(xs, tslices, ys', xlabel="x", ylabel="t")
```

### Implicit-Explicit Methods

```julia
abstols = 0.1 .^ (5:8) # all fixed dt methods so these don't matter much
reltols = 0.1 .^ (1:4)
multipliers = 0.5 .^ (0:4)
setups = [
    Dict(:alg => IMEXEuler(), :dts => 1e-4 * multipliers),
    Dict(:alg => CNAB2(), :dts => 1e-4 * multipliers),
    Dict(:alg => CNLF2(), :dts => 1e-4 * multipliers),
    Dict(:alg => SBDF2(), :dts => 1e-4 * multipliers)
]
labels = hcat(
    "IMEXEuler",
    "CNAB2",
    "CNLF2",
    "SBDF2",
)
@time wp = WorkPrecisionSet(prob, abstols, reltols, setups;
    print_names=true, names=labels, numruns=5, error_estimate=:l2,
    save_everystep=false, appxsol=test_sol, maxiters=Int(1e5));

plot(wp, label=labels, markershape=:auto, title="Work-Precision Diagram, High Tolerance")
```

### Exponential Integrators

```julia
abstols = 0.1 .^ (5:8) # all fixed dt methods so these don't matter much
reltols = 0.1 .^ (1:4)
multipliers = 0.5 .^ (0:4)
setups = [
    Dict(:alg => NorsettEuler(), :dts => 1e-4 * multipliers),
    Dict(:alg => NorsettEuler(krylov=true, m=5), :dts => 1e-4 * multipliers),
    Dict(:alg => NorsettEuler(krylov=true, m=20), :dts => 1e-4 * multipliers),
    Dict(:alg => ETDRK2(), :dts => 1e-4 * multipliers),
    Dict(:alg => ETDRK2(krylov=true, m=20), :dts => 1e-4 * multipliers),
    Dict(:alg => ETDRK2(krylov=true, m=20), :dts => 1e-4 * multipliers)
]
labels = hcat(
    "NorsettEuler (caching)", 
    "NorsettEuler (m=5)",
    "NorsettEuler (m=20)",
    "ETDRK2 (caching)", 
    "ETDRK2 (m=5)", 
    "ETDRK2 (m=20)"
)
@time wp = WorkPrecisionSet(prob, abstols, reltols, setups;
    print_names=true, names=labels, numruns=5, error_estimate=:l2,
    save_everystep=false, appxsol=test_sol, maxiters=Int(1e5));

plot(wp, label=labels, markershape=:auto, title="ExpRK methods, low order")
```

### Explicit Methods

```julia
abstols = 0.1 .^ (5:7) # all fixed dt methods so these don't matter much
reltols = 0.1 .^ (1:3)
multipliers = 0.5 .^ (0:4)
setups = [
    Dict(:alg => RK4(), :dts => 1e-4 * multipliers),
    Dict(:alg => Tsit5(), :dts => 1e-4 * multipliers),
    Dict(:alg => Vern7(), :dts => 1e-4 * multipliers)
]
labels = hcat(
    "RK4",
    "Tsit5",
    "Vern7",
)
@time wp = WorkPrecisionSet(prob, abstols, reltols, setups;
    print_names=true, names=labels, numruns=5, error_estimate=:l2,
    save_everystep=false, appxsol=test_sol, maxiters=Int(1e5));

plot(wp, label=labels, markershape=:auto, title="Work-Precision Diagram, High Tolerance")
```


### Between Family Comparisons

```julia
abstols = 0.1 .^ (5:8) # all fixed dt methods so these don't matter much
reltols = 0.1 .^ (1:4)
multipliers = 0.5 .^ (0:3)
setups = [
    Dict(:alg => CNAB2(), :dts => 1e-4 * multipliers),
    Dict(:alg => CNAB2(linsolve=KrylovJL_GMRES()), :dts => 1e-4 * multipliers),
    Dict(:alg => ETDRK2(), :dts => 1e-4 * multipliers),
]
labels = hcat(
    "CNAB2 (dense linsolve)",
    "CNAB2 (Krylov linsolve)", 
    "ETDRK2 (caching)",
)
@time wp = WorkPrecisionSet(prob, abstols, reltols, setups;
    print_names=true, names=labels, numruns=5, error_estimate=:l2,
    save_everystep=false, appxsol=test_sol, maxiters=Int(1e5));

plot(wp, label=labels, markershape=:auto, title="Between family, low orders")
```

```julia, echo = false
using SciMLBenchmarks
SciMLBenchmarks.bench_footer(WEAVE_ARGS[:folder],WEAVE_ARGS[:file])
```
