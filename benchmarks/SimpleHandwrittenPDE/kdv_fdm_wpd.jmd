---
title: KdV FDM Work-Precision Diagrams
author: Arjit Seth
---

```julia
using OrdinaryDiffEq
using DiffEqDevTools
using SciMLOperators
using LinearSolve
using LinearAlgebra
using SparseArrays
using Plots
gr();
```

The Kortwrieg de Vries (KdV) partial differential equation is solved with the following initial and boundary conditions:
```math
\begin{align}
    \partial_t u + \partial_x^3 u + 6u\partial_x u & = 0 \\
    u(0,x) & = 0.9\exp\left[-\frac{(x - \mu_0)^2}{2 * σ0^2}\right], \quad \mu = 0.5,~\sigma = 0.05 \\
    u(t,0) & = u(t,1) = 0
\end{align}
```
This is discretized in space via the finite difference method.
```math
\begin{align}
    \partial_t u + D_x^3 u +  & = 0 \\
    u(0,x) & = 0.9\exp\left[-\frac{(x - \mu_0)^2}{2 * σ0^2}\right], \quad \mu = 0.5,~\sigma = 0.05 \\
    u(t,0) & = u(t,1) = 0, 
\end{align}
```



```julia
# Linear term: third derivative
function linear_term(N, dx, mu)
    # Third derivative operator (-u_xxx)
    e = ones(N)
    D3 = spdiagm(
        -2 => -0.5e[1:end-1],
        -1 => e,
        1 => -e,
        2 => 0.5e[1:end-1],
    )
    # Coefficients for periodic boundary conditions
    D3[1, end-1] = -0.5
    D3[2, end] = -0.5
    D3[end, 2] = 0.5
    D3[end-1, 1] = 0.5
    D3[end, 1] = -1
    D3[1, end] = 1
    D3 ./= dx^3 # Central difference

    return -mu * D3
end

# Nonlinear term: nonlinear convection
function nonlinear_term(N, dx, alpha)
    # First derivative operator
    e = ones(N)
    D1 = spdiagm(1 => e, -1 => -e)
    D1[1, end] = -1 # Left ghost cell
    D1[end, 1] = 1  # Right ghost cell
    D1 /= 2dx # Central difference

    # Nonlinear convection term (6u * u_x)
    function (du, u, p, t)
        mul!(du, D1, u)
        @. du *= (6 * alpha) * u
    end
end

# Construct the problem
function kortwrieg_de_vries(N, L)
    x = LinRange(0, L, N + 1)
    dx = x[2] - x[1]

    mu = 10.0 # Coefficient for the linear term
    alpha = 10.0 # Coefficient for the nonlinear term
    f1 = linear_term(N, dx, mu)
    f2 = nonlinear_term(N, dx, alpha)

    # Initial condition: localized bump
    u0 = @. cos(2π * x / L)^2
    prob = SplitODEProblem(MatrixOperator(f1), f2, u0, (0.0, 1.0))

    return x, prob
end;
```

Reference solution using Tsit5 is below:

```julia
N = 128 # Number of grid points
L = 32.0  # Domain length
xs, prob = kortwrieg_de_vries(N, L)
sol = solve(prob, Tsit5(); abstol=1e-14, reltol=1e-14, adaptive=true)

tslices = LinRange(0.0, 1.0, 50)
ys = mapreduce(sol, hcat, tslices)
plt = heatmap(xs, tslices, ys', xlabel="x", ylabel="t")
```

## Work-Precision Diagrams

```julia
test_sol = TestSolution(sol); # Reference solution for error estimation

abstols = 0.1 .^ (5:9) # all fixed dt methods so these don't matter much
reltols = 0.1 .^ (1:5)
multipliers = 0.5 .^ (0:4)
setups = [
    Dict(:alg => IMEXEuler(), :dts => 1e-4 * multipliers), 
    Dict(:alg => CNAB2(), :dts => 1e-4 * multipliers),
    Dict(:alg => CNLF2(), :dts => 1e-4 * multipliers),
    Dict(:alg => ETDRK2(), :dts => 1e-4 * multipliers),
    Dict(:alg => SBDF2(), :dts => 1e-4 * multipliers)
]
labels = hcat(
    "IMEXEuler", 
    "CNAB2",
    "CNLF2",
    "ETDRK2",
    "SBDF2",
)

@time wp = WorkPrecisionSet(prob, abstols, reltols, setups;
    print_names=true, names=labels, numruns=5, error_estimate=:l2,
    save_everystep=false, appxsol=test_sol, maxiters=Inf);

plot(wp, label=labels, 
    markershape=:auto, title="Work-Precision Diagram",
    legend=:topright, size=(800, 600))
```

```julia, echo = false
using SciMLBenchmarks
SciMLBenchmarks.bench_footer(WEAVE_ARGS[:folder],WEAVE_ARGS[:file])
```
