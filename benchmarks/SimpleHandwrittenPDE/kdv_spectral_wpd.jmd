---
title: KdV Pseudospectral Methods Work-Precision Diagrams
author: HAO HAO
---

```julia
using OrdinaryDiffEq
using DiffEqDevTools
using SciMLOperators
using LinearSolve
using LinearAlgebra
using SparseArrays
using ApproxFun
using DomainSets
using Plots
using Plots; gr()
```

## Korteweg-de Vries Equation


## Implementation

```julia
# Nonlinear term: nonlinear convection
function nonlinear_term(dû, û, p, t)
    D1, T, Ti, u, tmp, alpha = p
    mul!(u, D1, û) # Derivative in Fourier space
    mul!(tmp, Ti, u) # Map to real space: u_x
    mul!(u, Ti, û) # Map to real space: u
    @. u *= tmp # Multiply in real space: u * u_x
    mul!(dû, T, (6 * alpha) * u) # Transform back to Fourier space
end

function korteweg_de_vries(S, n)
    D1 = (ApproxFun.Derivative(S) → S)[1:n, 1:n]
    D3 = (ApproxFun.Derivative(S, 3) → S)[1:n, 1:n] # Linear term

    x = points(S, n) # Discretization
    T = ApproxFun.plan_transform(S, n)
    Ti = ApproxFun.plan_itransform(S, n)
    L = S.spaces[1].domain.b
    u0 = T * @. cos(2π * x / L)^2
    
    alpha = 10.0 # Lipshitz constant scaling factor
    p = (D1, T, Ti, similar(u0), similar(u0), alpha)
    prob = SplitODEProblem(MatrixOperator(-D3), nonlinear_term, u0, (0.0, 1.0), p)

    return x, prob
end
```

## Reference Solution

```julia
L = 16.0 # Domain length
n = 128
S = ApproxFun.Fourier(-L..L)
xs, prob = korteweg_de_vries(S, n)
T, Ti = prob.p[2:3]

@time sol = solve(prob, Tsit5();
                  dt = 1e-4, reltol = 1e-12, abstol = 1e-12)

tslices = LinRange(prob.tspan..., 50)
ys = mapreduce(t -> Ti * sol(t), hcat, tslices)
plt = heatmap(xs, tslices, ys', xlabel = "x", ylabel = "t")
```


## Work-Precision Diagrams

```julia
test_sol = TestSolution(sol); # Reference solution for error estimation

abstols = 0.1 .^ (5:9) # all fixed dt methods so these don't matter much
reltols = 0.1 .^ (1:5)
multipliers = 0.5 .^ (0:4)
setups = [
    Dict(:alg => IMEXEuler(), :dts => 1e-3 * multipliers), 
    # Dict(:alg => CNAB2(), :dts => 1e-3 * multipliers),
    Dict(:alg => CNLF2(), :dts => 1e-3 * multipliers),
    Dict(:alg => ETDRK2(), :dts => 1e-3 * multipliers),
    Dict(:alg => SBDF2(), :dts => 1e-3 * multipliers)
]
labels = hcat(
    "IMEXEuler", 
    #"CNAB2",
    "CNLF2",
    "ETDRK2",
    "SBDF2",
)

@time wp = WorkPrecisionSet(prob, abstols, reltols, setups;
    print_names=true, names=labels, numruns=5, error_estimate=:l2,
    save_everystep=false, appxsol=test_sol, maxiters=Inf);

plot(wp, label=labels, 
    markershape=:auto, title="Work-Precision Diagram",
    legend=:topright, size=(800, 600))
```

```julia, echo = false
using SciMLBenchmarks
SciMLBenchmarks.bench_footer(WEAVE_ARGS[:folder],WEAVE_ARGS[:file])
```
