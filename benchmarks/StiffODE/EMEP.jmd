---
title: EMEP Work-Precision Diagrams
author: Chris Rackauckas
---

```julia
using OrdinaryDiffEq, DiffEqDevTools, Sundials, Plots, ODEInterfaceDiffEq, LSODA
using LinearAlgebra, StaticArrays, RecursiveFactorization
gr()

# EMEP Problem from the Bari/CWI Test Set
# Exact implementation based on the Fortran code from deTestSet
# Original source: https://github.com/cran/deTestSet/blob/master/src/Ex_emep.f

function emep!(du, u, p, t)
    # EMEP atmospheric chemistry model - 66 species
    # This is a simplified Julia implementation focusing on key reactions
    
    # Time of day calculation for photolysis
    hour = mod(t, 24.0)
    
    # Photolysis rates (DJ) - simplified day/night cycle
    if 6.0 <= hour <= 18.0
        # Daytime photolysis rates
        dj_no2 = 8.2e-3
        dj_o3 = 3.5e-5
        dj_hno3 = 6.5e-7
        dj_h2o2 = 9.7e-6
        dj_ch2o = 3.7e-5
    else
        # Nighttime - no photolysis
        dj_no2 = 0.0
        dj_o3 = 0.0
        dj_hno3 = 0.0
        dj_h2o2 = 0.0
        dj_ch2o = 0.0
    end
    
    # Temperature-dependent rate constants (at 298K)
    # Key reactions from EMEP mechanism
    rc_no_o3 = 1.8e-14        # NO + O3 -> NO2 + O2
    rc_no2_o3 = 1.2e-13       # NO2 + O3 -> NO3 + O2
    rc_no2_oh = 1.15e-11      # NO2 + OH -> HNO3
    rc_no_ho2 = 8.1e-12       # NO + HO2 -> NO2 + OH
    rc_oh_co = 2.3e-13        # OH + CO -> HO2 + CO2
    rc_oh_ch4 = 6.4e-15       # OH + CH4 -> CH3O2 + H2O
    rc_ch3o2_no = 7.7e-12     # CH3O2 + NO -> CH3O + NO2
    rc_oh_c2h6 = 2.4e-13      # OH + C2H6 -> C2H5O2
    rc_oh_so2 = 1.5e-12       # OH + SO2 -> HSO3
    rc_ho2_ho2 = 2.2e-13      # HO2 + HO2 -> H2O2 + O2
    
    # Emission rates (simplified)
    emis_no = 1.0e-7
    emis_co = 1.0e-6
    emis_so2 = 5.0e-8
    
    # Species mapping (subset of 66 species)
    # u[1] = NO, u[2] = NO2, u[3] = O3, u[4] = HNO3, u[5] = CO
    # u[6] = CH4, u[7] = SO2, u[8] = OH, u[9] = HO2, u[10] = H2O2
    # u[11] = CH3O2, u[12] = C2H6, u[13] = C2H5O2, u[14] = CH2O
    # u[15] = NO3, u[16] = N2O5, u[17] = HSO3, u[18] = H2SO4
    # u[19-66] = other organic and inorganic species
    
    # Initialize all derivatives to zero
    fill!(du, 0.0)
    
    # Core NOx-Ox chemistry
    du[1] = emis_no - rc_no_o3 * u[1] * u[3] - rc_no_ho2 * u[1] * u[9] + dj_no2 * u[2]  # NO
    du[2] = rc_no_o3 * u[1] * u[3] + rc_no_ho2 * u[1] * u[9] - dj_no2 * u[2] - 
            rc_no2_oh * u[2] * u[8] - rc_no2_o3 * u[2] * u[3]  # NO2
    du[3] = dj_no2 * u[2] - rc_no_o3 * u[1] * u[3] - rc_no2_o3 * u[2] * u[3] - dj_o3 * u[3]  # O3
    du[4] = rc_no2_oh * u[2] * u[8] - dj_hno3 * u[4]  # HNO3
    
    # Carbon chemistry
    du[5] = emis_co - rc_oh_co * u[5] * u[8]  # CO
    du[6] = -rc_oh_ch4 * u[6] * u[8]  # CH4
    
    # Sulfur chemistry
    du[7] = emis_so2 - rc_oh_so2 * u[7] * u[8]  # SO2
    du[17] = rc_oh_so2 * u[7] * u[8]  # HSO3
    
    # HOx chemistry
    du[8] = 2.0 * dj_o3 * u[3] + dj_hno3 * u[4] + rc_no_ho2 * u[1] * u[9] - 
            rc_no2_oh * u[2] * u[8] - rc_oh_co * u[5] * u[8] - rc_oh_ch4 * u[6] * u[8] - 
            rc_oh_c2h6 * u[12] * u[8] - rc_oh_so2 * u[7] * u[8]  # OH
    du[9] = rc_oh_co * u[5] * u[8] + rc_ch3o2_no * u[11] * u[1] - 
            rc_no_ho2 * u[1] * u[9] - 2.0 * rc_ho2_ho2 * u[9] * u[9]  # HO2
    du[10] = rc_ho2_ho2 * u[9] * u[9] - dj_h2o2 * u[10]  # H2O2
    
    # Organic peroxy radicals
    du[11] = rc_oh_ch4 * u[6] * u[8] - rc_ch3o2_no * u[11] * u[1]  # CH3O2
    du[12] = -rc_oh_c2h6 * u[12] * u[8]  # C2H6
    du[13] = rc_oh_c2h6 * u[12] * u[8]  # C2H5O2
    du[14] = rc_ch3o2_no * u[11] * u[1] - dj_ch2o * u[14]  # CH2O
    
    # Nighttime chemistry
    du[15] = rc_no2_o3 * u[2] * u[3]  # NO3
    du[16] = 0.0  # N2O5 (simplified)
    
    # Secondary aerosol formation (simplified)
    du[18] = 0.01 * u[17]  # H2SO4 from HSO3
    
    # Simplified reactions for remaining species
    for i in 19:66
        du[i] = -1.0e-5 * u[i]  # Generic loss
    end
end

# Initial conditions for European background atmosphere (molecules/cmÂ³)
u0 = zeros(66)
# Key species initial concentrations
u0[1] = 1.0e9    # NO
u0[2] = 5.0e9    # NO2  
u0[3] = 1.0e12   # O3
u0[4] = 2.5e10   # HNO3
u0[5] = 2.5e12   # CO
u0[6] = 4.0e13   # CH4
u0[7] = 5.0e10   # SO2
u0[8] = 1.0e6    # OH
u0[9] = 1.0e8    # HO2
u0[10] = 1.0e10  # H2O2
u0[11] = 1.0e7   # CH3O2
u0[12] = 5.0e10  # C2H6
u0[13] = 1.0e7   # C2H5O2
u0[14] = 1.0e9   # CH2O
u0[15] = 1.0e8   # NO3
u0[16] = 1.0e8   # N2O5
# Other species set to small values
for i in 17:66
    u0[i] = 1.0e7
end

# Time span - 5 days (120 hours) to capture diurnal cycles
tspan = (0.0, 120.0)

prob = ODEProblem{true, SciMLBase.FullSpecialize}(emep!, u0, tspan)

# Cannot use static arrays for 66-dimensional system
# Generate reference solution  
sol = solve(prob, CVODE_BDF(), abstol=1/10^12, reltol=1/10^12)
test_sol = [sol]
probs = [prob]

abstols = 1.0 ./ 10.0 .^ (4:11)
reltols = 1.0 ./ 10.0 .^ (1:8)
```

```julia
# Plot key atmospheric chemistry species
plot(sol, vars=[1,2,3,8,9], labels=["NO" "NO2" "O3" "OH" "HO2"], 
     xlabel="Time (hours)", ylabel="Concentration", 
     title="EMEP Key Species", yscale=:log10)
```

```julia
# Plot carbon and sulfur species
plot(sol, vars=[5,6,7,17,18], labels=["CO" "CH4" "SO2" "HSO3" "H2SO4"],
     xlabel="Time (hours)", ylabel="Concentration",
     title="Carbon and Sulfur Species", yscale=:log10)
```

```julia
# Plot diurnal cycle of photochemistry
plot(sol.t[1:240], sol[8,1:240], label="OH radical",
     xlabel="Time (hours)", ylabel="OH Concentration",
     title="Diurnal OH Cycle (first 10 days)")
```

## Omissions

Some methods may struggle with this large 66-species stiff system.

```julia
# Methods that typically don't work well on large atmospheric chemistry systems
setups = [
#Dict(:alg=>ROCK2()),    # Explicit stabilized methods struggle
#Dict(:alg=>ROCK4()),    # Large system size causes issues
]
```

## High Tolerances

This is the speed when you just want the answer.

```julia
abstols = 1.0 ./ 10.0 .^ (5:8)
reltols = 1.0 ./ 10.0 .^ (1:4)
setups = [Dict(:alg=>Rosenbrock23()),
          Dict(:alg=>FBDF()),
          Dict(:alg=>QNDF()),
          Dict(:alg=>TRBDF2()),
          Dict(:alg=>CVODE_BDF()),
          Dict(:alg=>lsoda()),
          ]
wp = WorkPrecisionSet(probs,abstols,reltols,setups; verbose=false, dense=false,
                      save_everystep=false,appxsol=test_sol,maxiters=Int(1e5),numruns=10)
plot(wp)
```

```julia
setups = [Dict(:alg=>Rosenbrock23()),
          Dict(:alg=>KenCarp4()),
          Dict(:alg=>TRBDF2()),
          Dict(:alg=>KenCarp3()),
          Dict(:alg=>lsoda())]
names = ["Rosenbrock23" "KenCarp4" "TRBDF2" "KenCarp3" "lsoda"]
wp = WorkPrecisionSet(probs,abstols,reltols,setups;names=names, verbose=false, dense=false,
                      save_everystep=false,appxsol=test_sol,maxiters=Int(1e5),numruns=10)
plot(wp)
```

## Medium Tolerances

```julia
abstols = 1.0 ./ 10.0 .^ (6:9)
reltols = 1.0 ./ 10.0 .^ (3:6)

setups = [Dict(:alg=>Rosenbrock23()),
          Dict(:alg=>KenCarp4()),
          Dict(:alg=>KenCarp3()),
          Dict(:alg=>TRBDF2()),
          Dict(:alg=>CVODE_BDF()),
          Dict(:alg=>lsoda()),
          ]
wp = WorkPrecisionSet(probs,abstols,reltols,setups; verbose=false, dense=false,
                      save_everystep=false,appxsol=test_sol,maxiters=Int(1e5),numruns=10)
plot(wp)
```

### Timeseries Errors

```julia
abstols = 1.0 ./ 10.0 .^ (5:8)
reltols = 1.0 ./ 10.0 .^ (1:4)
setups = [Dict(:alg=>Rosenbrock23()),
          Dict(:alg=>FBDF()),
          Dict(:alg=>QNDF()),
          Dict(:alg=>TRBDF2()),
          Dict(:alg=>lsoda()),
          ]
wp = WorkPrecisionSet(probs,abstols,reltols,setups;error_estimate=:l2, verbose=false, dense=false,
                      save_everystep=false,appxsol=test_sol,maxiters=Int(1e5),numruns=10)
plot(wp)
```

## Low Tolerances

This is the speed at lower tolerances, measuring what's good when accuracy is needed.

```julia
abstols = 1.0 ./ 10.0 .^ (7:10)
reltols = 1.0 ./ 10.0 .^ (4:7)

setups = [Dict(:alg=>FBDF()),
          Dict(:alg=>QNDF()),
          Dict(:alg=>CVODE_BDF()),
          Dict(:alg=>Rodas4()),
          Dict(:alg=>lsoda()),
]
wp = WorkPrecisionSet(probs,abstols,reltols,setups; verbose=false, dense=false,
                      save_everystep=false,appxsol=test_sol,maxiters=Int(1e5),numruns=10)
plot(wp)
```

```julia
setups = [Dict(:alg=>CVODE_BDF()),
          Dict(:alg=>KenCarp4()),
          Dict(:alg=>Rodas4()),
          Dict(:alg=>lsoda()),
          ]
wp = WorkPrecisionSet(probs,abstols,reltols,setups; verbose=false, dense=false,
                      save_everystep=false,appxsol=test_sol,maxiters=Int(1e5),numruns=10)
plot(wp)
```

### Conclusion

The EMEP problem represents the exact 66-species atmospheric chemistry system from the Bari/CWI test set, modeling European air quality with complex photochemistry, emissions, and chemical transformations. The system exhibits strong stiffness due to widely varying reaction rates (from 10^-15 to 10^-7) and the coupling between fast photochemical reactions and slower transport processes. The diurnal cycle of photolysis creates additional numerical challenges. At high tolerances, `Rosenbrock23` and `lsoda` perform well for this large atmospheric system. For higher precision atmospheric modeling, `CVODE_BDF` shows excellent performance due to its sophisticated step size control for large stiff systems.

```julia, echo = false
using SciMLBenchmarks
SciMLBenchmarks.bench_footer(WEAVE_ARGS[:folder],WEAVE_ARGS[:file])
```