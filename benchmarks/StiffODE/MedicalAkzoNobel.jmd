---
title: Medical Akzo Nobel Work-Precision Diagrams
author: Chris Rackauckas
---

```julia
using OrdinaryDiffEq, DiffEqDevTools, Sundials, Plots, ODEInterfaceDiffEq, LSODA
using LinearAlgebra, StaticArrays, RecursiveFactorization
gr()

# Medical Akzo Nobel Problem - Pharmaceutical kinetics model
# Based on the classic test problem for stiff ODE systems
# Models drug distribution and metabolism with multiple time scales

function medical_akzo_nobel!(du, u, p, t)
    # Direct translation of Medical Akzo Nobel problem from medakzo.f
    # Parameters from Fortran: k=100.0, c=4.0
    # 400-dimensional system with finite difference discretization
    
    k = 100.0
    c = 4.0
    
    # Problem dimension (neqn = 400, so N = 200)
    neqn = length(u)
    N = div(neqn, 2)
    
    # Grid spacing
    dzeta = 1.0 / N
    dzeta2 = dzeta * dzeta
    
    # Time-dependent forcing term with discontinuity at t=5
    if t <= 5.0
        phi = 2.0
    else
        phi = 0.0
    end
    
    # First equation (j=1, i=1)
    zeta = 0.0  # For boundary
    dum = (dzeta - 1.0)^2 / c
    alpha = 2.0 * (dzeta - 1.0) * dum / c
    beta = dum^2
    
    du[1] = (phi - 2.0*u[1] + u[3]) * beta / dzeta2 + 
            alpha * (u[3] - phi) / (2.0 * dzeta) - k * u[1] * u[2]
    du[2] = -k * u[1] * u[2]
    
    # Middle equations (j=2 to N-1)
    for j in 2:(N-1)
        i = 2*j - 1
        zeta = j * dzeta
        dum = (zeta - 1.0)^2 / c
        alpha = 2.0 * (zeta - 1.0) * dum / c
        beta = dum^2
        
        du[i] = (u[i-2] - 2.0*u[i] + u[i+2]) * beta / dzeta2 + 
                alpha * (u[i+2] - u[i-2]) / (2.0 * dzeta) - k * u[i] * u[i+1]
        du[i+1] = -k * u[i] * u[i-1]
    end
    
    # Last equations (j=N)
    i = 2*N - 1
    zeta = N * dzeta  # zeta = 1.0 at boundary
    dum = (zeta - 1.0)^2 / c  # This becomes 0 at boundary
    alpha = 2.0 * (zeta - 1.0) * dum / c
    beta = dum^2
    
    # At boundary (zeta=1), simplified form
    du[i] = (u[i-2] - 2.0*u[i]) * beta / dzeta2 + 
            alpha * (-u[i-2]) / (2.0 * dzeta) - k * u[i] * u[i+1]
    du[i+1] = -k * u[i] * u[i-1]
end

# Initial conditions from Fortran medakzo.f
# For j = 1 to neqn/2: y(2*j-1) = 0.0, y(2*j) = 1.0
neqn = 400  # Full 400-dimensional system as in Fortran
u0 = zeros(neqn)
for j in 1:div(neqn, 2)
    u0[2*j-1] = 0.0  # y(2*j-1) = 0.0
    u0[2*j] = 1.0    # y(2*j) = 1.0
end

# Time span from Fortran test - 0 to 20 with discontinuity at t=5
tspan = (0.0, 20.0)

prob = ODEProblem{true, SciMLBase.FullSpecialize}(medical_akzo_nobel!, u0, tspan, tstops=[5.0])
# Note: 400-dimensional system too large for static arrays

# Generate reference solution
sol = solve(prob, CVODE_BDF(), abstol=1/10^14, reltol=1/10^14)
probs = [prob]
test_sol = [sol]

abstols = 1.0 ./ 10.0 .^ (4:11)
reltols = 1.0 ./ 10.0 .^ (1:8)
```

```julia
# Plot first few variables to show system behavior
plot(sol, vars=1:10, xlabel="Time", ylabel="Concentration", 
     title="Medical Akzo Nobel - First 10 Variables")
```

```julia
# Plot every 10th variable to show spatial distribution
plot(sol, vars=1:10:100, xlabel="Time", ylabel="Concentration",
     title="Medical Akzo Nobel - Spatial Distribution")
```

## High Tolerances

```julia
abstols = 1.0 ./ 10.0 .^ (5:8)
reltols = 1.0 ./ 10.0 .^ (1:4)
setups = [Dict(:alg=>Rosenbrock23()),
          Dict(:alg=>Rosenbrock23(), :prob_choice => 2),
          Dict(:alg=>FBDF()),
          Dict(:alg=>QNDF()),
          Dict(:alg=>TRBDF2()),
          Dict(:alg=>CVODE_BDF()),
          Dict(:alg=>rodas()),
          Dict(:alg=>radau()),
          Dict(:alg=>RadauIIA5()),
          Dict(:alg=>ROS34PW1a()),
          Dict(:alg=>lsoda()),
          ]
wp = WorkPrecisionSet(probs,abstols,reltols,setups; verbose=false, dense=false,
                      save_everystep=false,appxsol=test_sol,maxiters=Int(1e5),numruns=10)
plot(wp)
```

```julia
setups = [Dict(:alg=>Rosenbrock23()),
          Dict(:alg=>Kvaerno3()),
          Dict(:alg=>KenCarp4()),
          Dict(:alg=>TRBDF2()),
          Dict(:alg=>KenCarp3()),
          Dict(:alg=>lsoda()),
          Dict(:alg=>radau())]
names = ["Rosenbrock23" "Kvaerno3" "KenCarp4" "TRBDF2" "KenCarp3" "lsoda" "radau"]
wp = WorkPrecisionSet(probs,abstols,reltols,setups;names=names, verbose=false, dense=false,
                      save_everystep=false,appxsol=test_sol,maxiters=Int(1e5),numruns=10)
plot(wp)
```

## Medium Tolerances

```julia
abstols = 1.0 ./ 10.0 .^ (6:9)
reltols = 1.0 ./ 10.0 .^ (3:6)

setups = [Dict(:alg=>Rosenbrock23()),
          Dict(:alg=>KenCarp5()),
          Dict(:alg=>KenCarp4()),
          Dict(:alg=>KenCarp3()),
          Dict(:alg=>TRBDF2()),
          Dict(:alg=>CVODE_BDF()),
          Dict(:alg=>rodas()),
          Dict(:alg=>radau()),
          ]
wp = WorkPrecisionSet(probs,abstols,reltols,setups; verbose=false, dense=false,
                      save_everystep=false,appxsol=test_sol,maxiters=Int(1e5),numruns=10)
plot(wp)
```

## Low Tolerances

```julia
abstols = 1.0 ./ 10.0 .^ (7:12)
reltols = 1.0 ./ 10.0 .^ (4:9)

setups = [Dict(:alg=>FBDF()),
          Dict(:alg=>QNDF()),
          Dict(:alg=>CVODE_BDF()),
          Dict(:alg=>ddebdf()),
          Dict(:alg=>Rodas4()),
          Dict(:alg=>rodas()),
          Dict(:alg=>lsoda()),
          Dict(:alg=>radau()),
          Dict(:alg=>RadauIIA5()),
]
wp = WorkPrecisionSet(probs,abstols,reltols,setups; verbose=false, dense=false,
                      save_everystep=false,appxsol=test_sol,maxiters=Int(1e5),numruns=10)
plot(wp)
```

### Conclusion

The Medical Akzo Nobel problem is a direct translation of the 400-dimensional stiff ODE system from the original Fortran test set. This problem models a reaction-diffusion system with finite difference spatial discretization, featuring parameters k=100.0 and c=4.0. The system exhibits stiffness due to the reaction terms -k*y(i)*y(j) combined with diffusion and advection operators. The time-dependent forcing function phi switches from 2.0 to 0.0 at t=5, creating a discontinuity that challenges numerical methods. This benchmark represents one of the larger dimensional test problems in the classic stiff ODE test suite.

```julia, echo = false
using SciMLBenchmarks
SciMLBenchmarks.bench_footer(WEAVE_ARGS[:folder],WEAVE_ARGS[:file])
```