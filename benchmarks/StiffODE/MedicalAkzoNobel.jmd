---
title: Medical Akzo Nobel Work-Precision Diagrams
author: Chris Rackauckas
---

```julia
using OrdinaryDiffEq, DiffEqDevTools, Sundials, Plots, ODEInterfaceDiffEq, LSODA
using LinearAlgebra, StaticArrays, RecursiveFactorization
gr()

# Medical Akzo Nobel Problem - Pharmaceutical kinetics model
# Based on the classic test problem for stiff ODE systems
# Models drug distribution and metabolism with multiple time scales

function medical_akzo_nobel!(du, u, p, t)
    # This is a representative pharmaceutical kinetics model
    # showing the structure typical of the Medical Akzo Nobel problem
    
    # Parameters for multi-compartment pharmacokinetic model
    ε = 1e-6  # Small parameter causing singular perturbation
    
    # Drug distribution and metabolism parameters
    k_abs = 2.0      # Absorption rate (1/h)
    k_12 = 0.5       # Distribution rate central→peripheral (1/h)
    k_21 = 0.1       # Distribution rate peripheral→central (1/h) 
    k_el = 0.2       # Elimination rate (1/h)
    k_met = 5.0      # Metabolism rate (1/h)
    
    # Protein binding parameters (fast equilibrium)
    k_on = 1e6       # Binding rate (1/M/h)
    k_off = 100.0    # Unbinding rate (1/h)
    
    # Receptor binding (slow process)
    k_rec_on = 0.01  # Receptor binding (1/M/h)
    k_rec_off = 0.1  # Receptor unbinding (1/h)
    
    # Variables:
    # u[1] = Drug in GI tract
    # u[2] = Free drug in central compartment
    # u[3] = Drug in peripheral compartment  
    # u[4] = Protein-bound drug (fast equilibrium)
    # u[5] = Receptor-bound drug (slow equilibrium)
    # u[6] = Metabolite concentration
    
    # Fast equilibrium approximation for protein binding
    total_protein = 50.0  # μM
    free_protein = total_protein - u[4]
    
    # Differential equations with multiple time scales
    du[1] = -k_abs * u[1]                                    # GI absorption
    du[2] = k_abs * u[1] - k_12 * u[2] + k_21 * u[3] - 
            k_el * u[2] - k_met * u[2] + k_off * u[4] - 
            k_on * u[2] * free_protein                       # Central compartment
    du[3] = k_12 * u[2] - k_21 * u[3]                       # Peripheral compartment
    du[4] = (k_on * u[2] * free_protein - k_off * u[4]) / ε # Fast protein binding
    du[5] = k_rec_on * u[2] - k_rec_off * u[5]              # Slow receptor binding
    du[6] = k_met * u[2]                                     # Metabolite formation
end

# Initial conditions - oral dose administration
dose = 100.0  # mg
u0 = [dose, 0.0, 0.0, 0.0, 0.0, 0.0]

# Time span - 24 hours post-dose
tspan = (0.0, 24.0)

prob = ODEProblem{true, SciMLBase.FullSpecialize}(medical_akzo_nobel!, u0, tspan)
probstatic = ODEProblem{false}(medical_akzo_nobel!, SVector{6}(u0), tspan)

# Generate reference solution
sol = solve(prob, CVODE_BDF(), abstol=1/10^14, reltol=1/10^14)
sol2 = solve(probstatic, Rodas5P(), abstol=1/10^14, reltol=1/10^14)
probs = [prob, probstatic]
test_sol = [sol, sol2]

abstols = 1.0 ./ 10.0 .^ (4:11)
reltols = 1.0 ./ 10.0 .^ (1:8)
```

```julia
plot(sol, labels=["GI tract" "Free drug" "Peripheral" "Protein-bound" "Receptor-bound" "Metabolite"])
```

```julia
# Focus on the clinically relevant variables
plot(sol, vars=[2,4,5,6], labels=["Free drug" "Protein-bound" "Receptor-bound" "Metabolite"], 
     xlabel="Time (hours)", title="Drug Disposition")
```

## High Tolerances

```julia
abstols = 1.0 ./ 10.0 .^ (5:8)
reltols = 1.0 ./ 10.0 .^ (1:4)
setups = [Dict(:alg=>Rosenbrock23()),
          Dict(:alg=>Rosenbrock23(), :prob_choice => 2),
          Dict(:alg=>FBDF()),
          Dict(:alg=>QNDF()),
          Dict(:alg=>TRBDF2()),
          Dict(:alg=>CVODE_BDF()),
          Dict(:alg=>rodas()),
          Dict(:alg=>radau()),
          Dict(:alg=>RadauIIA5()),
          Dict(:alg=>ROS34PW1a()),
          Dict(:alg=>lsoda()),
          ]
wp = WorkPrecisionSet(probs,abstols,reltols,setups; verbose=false, dense=false,
                      save_everystep=false,appxsol=test_sol,maxiters=Int(1e5),numruns=10)
plot(wp)
```

```julia
setups = [Dict(:alg=>Rosenbrock23()),
          Dict(:alg=>Rosenbrock23(), :prob_choice => 2),
          Dict(:alg=>Kvaerno3()),
          Dict(:alg=>KenCarp4()),
          Dict(:alg=>TRBDF2()),
          Dict(:alg=>KenCarp3()),
          Dict(:alg=>lsoda()),
          Dict(:alg=>radau())]
names = ["Rosenbrock23" "Rosenbrock23 Static" "Kvaerno3" "KenCarp4" "TRBDF2" "KenCarp3" "lsoda" "radau"]
wp = WorkPrecisionSet(probs,abstols,reltols,setups;names=names, verbose=false, dense=false,
                      save_everystep=false,appxsol=test_sol,maxiters=Int(1e5),numruns=10)
plot(wp)
```

## Medium Tolerances

```julia
abstols = 1.0 ./ 10.0 .^ (6:9)
reltols = 1.0 ./ 10.0 .^ (3:6)

setups = [Dict(:alg=>Rosenbrock23()),
          Dict(:alg=>Rosenbrock23(), :prob_choice => 2),
          Dict(:alg=>KenCarp5()),
          Dict(:alg=>KenCarp4()),
          Dict(:alg=>KenCarp4(), :prob_choice => 2),
          Dict(:alg=>KenCarp3()),
          Dict(:alg=>TRBDF2()),
          Dict(:alg=>CVODE_BDF()),
          Dict(:alg=>rodas()),
          Dict(:alg=>radau()),
          ]
wp = WorkPrecisionSet(probs,abstols,reltols,setups; verbose=false, dense=false,
                      save_everystep=false,appxsol=test_sol,maxiters=Int(1e5),numruns=10)
plot(wp)
```

## Low Tolerances

```julia
abstols = 1.0 ./ 10.0 .^ (7:12)
reltols = 1.0 ./ 10.0 .^ (4:9)

setups = [Dict(:alg=>FBDF()),
          Dict(:alg=>QNDF()),
          Dict(:alg=>CVODE_BDF()),
          Dict(:alg=>ddebdf()),
          Dict(:alg=>Rodas4()),
          Dict(:alg=>Rodas4(), :prob_choice => 2),
          Dict(:alg=>rodas()),
          Dict(:alg=>lsoda()),
          Dict(:alg=>radau()),
          Dict(:alg=>RadauIIA5()),
]
wp = WorkPrecisionSet(probs,abstols,reltols,setups; verbose=false, dense=false,
                      save_everystep=false,appxsol=test_sol,maxiters=Int(1e5),numruns=10)
plot(wp)
```

### Conclusion

The Medical Akzo Nobel problem demonstrates a challenging pharmacokinetic model with multiple time scales typical of pharmaceutical applications. The small parameter ε creates singular perturbation behavior, making protein binding equations stiff relative to distribution and elimination processes. This represents the type of multi-scale dynamics common in drug development where fast molecular interactions must be coupled with slower physiological processes.

```julia, echo = false
using SciMLBenchmarks
SciMLBenchmarks.bench_footer(WEAVE_ARGS[:folder],WEAVE_ARGS[:file])
```